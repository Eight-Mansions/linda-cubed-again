#include "font.h"

const u8 widths[] = {
	0x04, //  
	0x02, // !
	0x04, // "

	0x08, // #
	0x06, // $
	0x07, // %
	0x06, // &
	
	0x02, // '
	0x04, // (
	0x04, // )
	
	0x04, // *

	0x06, // +
	0x03, // ,
	0x06, // -
	0x02, // .
	0x05, // /
	0x05, // 0
	0x04, // 1
	0x05, // 2
	0x05, // 3
	0x05, // 4
	0x06, // 5
	0x05, // 6
	0x05, // 7
	0x05, // 8
	0x05, // 9
	0x02, // :
	0x03, // ;
	0x07, // <
	0x06, // =
	0x07, // >
	0x06, // ?
	0x08, // @
	0x05, // A
	0x05, // B
	0x05, // C
	0x05, // D
	0x05, // E
	0x05, // F
	0x05, // G
	0x06, // H
	0x04, // I
	0x05, // J
	0x06, // K
	0x05, // L
	0x06, // M
	0x06, // N
	0x05, // O
	0x05, // P
	0x05, // Q
	0x05, // R
	0x05, // S
	0x06, // T
	0x06, // U
	0x06, // V
	0x06, // W
	0x06, // X
	0x06, // Y
	0x06, // Z
	0x05, // [

	0x10, // /
	
	0x05, // ]

	0x08, // ^
	0x07, // _
	0x0C, // `
	
	0x05, // a
	0x05, // b 
	0x05, // c
	0x05, // d
	0x05, // e
	0x04, // f
	0x05, // g
	0x05, // h
	0x02, // i
	0x03, // j
	0x05, // k
	0x02, // l
	0x06, // m
	0x05, // n
	0x05, // o
	0x05, // p
	0x05, // q
	0x05, // r
	0x05, // s
	0x04, // t
	0x05, // u
	0x05, // v
	0x06, // w
	0x06, // x
	0x05, // y
	0x05, // z

	0x04, // {
	0x02, // |
	0x04, // }
	0x08, // ~
};

const u8 babyWidths[] = {
	0x04, // 00
	0x02, // 01
	0x04, // 02
	0x09, // 03
	0x06, // 04
	0x07, // 05
	0x06, // 06
	0x02, // 07
	0x04, // 08
	0x04, // 09
	0x04, // 0A
	0x06, // 0B
	0x03, // 0C
	0x06, // 0D
	0x02, // 0E
	0x05, // 0F
	0x06, // 10
	0x04, // 11
	0x06, // 12
	0x06, // 13
	0x06, // 14
	0x06, // 15
	0x06, // 16
	0x06, // 17
	0x06, // 18
	0x06, // 19
	0x02, // 1A
	0x03, // 1B
	0x07, // 1C
	0x06, // 1D
	0x07, // 1E
	0x06, // 1F
	0x08, // 20
	0x06, // 21
	0x06, // 22
	0x06, // 23
	0x06, // 24
	0x05, // 25
	0x05, // 26
	0x07, // 27
	0x06, // 28
	0x04, // 29
	0x07, // 2A
	0x06, // 2B
	0x05, // 2C
	0x07, // 2D
	0x06, // 2E
	0x06, // 2F
	0x06, // 30
	0x06, // 31
	0x06, // 32
	0x06, // 33
	0x06, // 34
	0x06, // 35
	0x06, // 36
	0x08, // 37
	0x06, // 38
	0x06, // 39
	0x06, // 3A
	0x04, // 3B
	0x08, // 3C
	0x04, // 3D
	0x08, // 3E
	0x07, // 3F
	0x00, // 40
	0x06, // 41
	0x05, // 42
	0x05, // 43
	0x06, // 44
	0x05, // 45
	0x06, // 46
	0x05, // 47
	0x05, // 48
	0x02, // 49
	0x05, // 4A
	0x05, // 4B
	0x02, // 4C
	0x08, // 4D
	0x05, // 4E
	0x05, // 4F
	0x05, // 50
	0x06, // 51
	0x05, // 52
	0x05, // 53
	0x04, // 54
	0x06, // 55
	0x06, // 56
	0x08, // 57
	0x06, // 58
	0x06, // 59
	0x05, // 5A
	0x04, // 5B
	0x02, // 5C
	0x04, // 5D
	0x08, // 5E
	0x08, // 5F
};

u8 GetLetterWidth(const u8 letterWidths[], u8 defaultWidth)
{
	if (currentLetter == '`')
	{
		vwfOn = !vwfOn;
		return 0;
	}

	if (vwfOn)
	{
		if (currentLetter >= 0x20 && currentLetter <= 0x7F)
		{
			u32 idx = currentLetter - 0x20;
			return letterWidths[idx];
		}
		else if (currentLetter == 0x8145) // Space
		{
			return 0x03;
		}
		else if (currentLetter >= 0x824F && currentLetter <= 0x8258) // SJIS 0 - 9
		{
			u32 idx = currentLetter - 0x821F;
			return letterWidths[idx];
		}
		else
		{
			return defaultWidth;
		}
	}
	
	return defaultWidth;
}

void SetLetter(const u32 letter)
{
	currentLetter = letter;
}

u16 GetRegularLetterWidth(u16 defaultWidth)
{
	return GetLetterWidth(widths, defaultWidth);
}

u16 GetBabyLetterWidth(u16 defaultWidth)
{
	return GetLetterWidth(babyWidths, defaultWidth);
}
